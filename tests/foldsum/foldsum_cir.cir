!s32i = !cir.int<s, 32>
#loc3 = loc("foldsum.c":1:14)
#loc4 = loc("foldsum.c":1:19)
#loc5 = loc("foldsum.c":1:22)
#loc6 = loc("foldsum.c":1:26)
#loc32 = loc(fused[#loc3, #loc4])
#loc33 = loc(fused[#loc5, #loc6])
module @"/home/walterjtv/Escritorio/Q8/TFG/tutorial/foldsum/foldsum.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func @fold_sum(%arg0: !cir.ptr<!s32i> loc(fused[#loc3, #loc4]), %arg1: !s32i loc(fused[#loc5, #loc6])) -> !s32i {
    %0 = cir.alloca !cir.ptr<!s32i>, cir.ptr <!cir.ptr<!s32i>>, ["a", init] {alignment = 8 : i64} loc(#loc32)
    %1 = cir.alloca !s32i, cir.ptr <!s32i>, ["n", init] {alignment = 4 : i64} loc(#loc33)
    %2 = cir.alloca !s32i, cir.ptr <!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc2)
    %3 = cir.alloca !s32i, cir.ptr <!s32i>, ["s", init] {alignment = 4 : i64} loc(#loc34)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, cir.ptr <!cir.ptr<!s32i>> loc(#loc9)
    cir.store %arg1, %1 : !s32i, cir.ptr <!s32i> loc(#loc9)
    %4 = cir.const(#cir.int<0> : !s32i) : !s32i loc(#loc8)
    cir.store %4, %3 : !s32i, cir.ptr <!s32i> loc(#loc34)
    cir.scope {
      %7 = cir.alloca !s32i, cir.ptr <!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc36)
      %8 = cir.const(#cir.int<0> : !s32i) : !s32i loc(#loc13)
      cir.store %8, %7 : !s32i, cir.ptr <!s32i> loc(#loc36)
      cir.for : cond {
        %9 = cir.load %7 : cir.ptr <!s32i>, !s32i loc(#loc14)
        %10 = cir.load %1 : cir.ptr <!s32i>, !s32i loc(#loc15)
        %11 = cir.cmp(lt, %9, %10) : !s32i, !s32i loc(#loc37)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc16)
        cir.condition(%12) loc(#loc16)
      } body {
        cir.scope {
          %9 = cir.load %0 : cir.ptr <!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc18)
          %10 = cir.load %7 : cir.ptr <!s32i>, !s32i loc(#loc19)
          %11 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc20)
          %12 = cir.load %11 : cir.ptr <!s32i>, !s32i loc(#loc18)
          %13 = cir.load %3 : cir.ptr <!s32i>, !s32i loc(#loc21)
          %14 = cir.binop(add, %13, %12) : !s32i loc(#loc39)
          cir.store %14, %3 : !s32i, cir.ptr <!s32i> loc(#loc39)
        } loc(#loc38)
        cir.yield loc(#loc11)
      } step {
        %9 = cir.load %7 : cir.ptr <!s32i>, !s32i loc(#loc23)
        %10 = cir.unary(inc, %9) : !s32i, !s32i loc(#loc24)
        cir.store %10, %7 : !s32i, cir.ptr <!s32i> loc(#loc40)
        cir.yield loc(#loc35)
      } loc(#loc35)
    } loc(#loc35)
    %5 = cir.load %3 : cir.ptr <!s32i>, !s32i loc(#loc25)
    cir.store %5, %2 : !s32i, cir.ptr <!s32i> loc(#loc41)
    %6 = cir.load %2 : cir.ptr <!s32i>, !s32i loc(#loc41)
    cir.return %6 : !s32i loc(#loc41)
  } loc(#loc31)
  cir.func no_proto @main() -> !s32i {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc28)
    %1 = cir.const(#cir.int<0> : !s32i) : !s32i loc(#loc29)
    cir.store %1, %0 : !s32i, cir.ptr <!s32i> loc(#loc43)
    %2 = cir.load %0 : cir.ptr <!s32i>, !s32i loc(#loc43)
    cir.return %2 : !s32i loc(#loc43)
  } loc(#loc42)
} loc(#loc)
#loc = loc("/home/walterjtv/Escritorio/Q8/TFG/tutorial/foldsum/foldsum.c":0:0)
#loc1 = loc("foldsum.c":1:1)
#loc2 = loc("foldsum.c":7:1)
#loc7 = loc("foldsum.c":2:3)
#loc8 = loc("foldsum.c":2:11)
#loc9 = loc("foldsum.c":1:29)
#loc10 = loc("foldsum.c":3:3)
#loc11 = loc("foldsum.c":5:3)
#loc12 = loc("foldsum.c":3:8)
#loc13 = loc("foldsum.c":3:16)
#loc14 = loc("foldsum.c":3:19)
#loc15 = loc("foldsum.c":3:23)
#loc16 = loc("foldsum.c":3:21)
#loc17 = loc("foldsum.c":3:31)
#loc18 = loc("foldsum.c":4:10)
#loc19 = loc("foldsum.c":4:12)
#loc20 = loc("foldsum.c":4:13)
#loc21 = loc("foldsum.c":4:7)
#loc22 = loc("foldsum.c":4:5)
#loc23 = loc("foldsum.c":3:27)
#loc24 = loc("foldsum.c":3:26)
#loc25 = loc("foldsum.c":6:10)
#loc26 = loc("foldsum.c":6:3)
#loc27 = loc("foldsum.c":9:1)
#loc28 = loc("foldsum.c":11:1)
#loc29 = loc("foldsum.c":10:9)
#loc30 = loc("foldsum.c":10:2)
#loc31 = loc(fused[#loc1, #loc2])
#loc34 = loc(fused[#loc7, #loc8])
#loc35 = loc(fused[#loc10, #loc11])
#loc36 = loc(fused[#loc12, #loc13])
#loc37 = loc(fused[#loc14, #loc15])
#loc38 = loc(fused[#loc17, #loc11])
#loc39 = loc(fused[#loc22, #loc20])
#loc40 = loc(fused[#loc24, #loc23])
#loc41 = loc(fused[#loc26, #loc25])
#loc42 = loc(fused[#loc27, #loc28])
#loc43 = loc(fused[#loc30, #loc29])
