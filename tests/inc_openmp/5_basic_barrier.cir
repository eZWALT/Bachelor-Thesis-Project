!s32i = !cir.int<s, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/walterjtv/Escritorio/Q8/TFG/tutorial/openmp/5_basic_barrier.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto @omp_barrier_1() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc2)
    omp.barrier loc(#loc17)
    %1 = cir.const(#cir.int<1> : !s32i) : !s32i loc(#loc5)
    cir.store %1, %0 : !s32i, cir.ptr <!s32i> loc(#loc18)
    %2 = cir.load %0 : cir.ptr <!s32i>, !s32i loc(#loc18)
    cir.return %2 : !s32i loc(#loc18)
  } loc(#loc16)
  cir.func no_proto @omp_barrier_2() extra(#fn_attr) {
    omp.barrier loc(#loc20)
    cir.return loc(#loc8)
  } loc(#loc19)
  cir.func no_proto @main() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, cir.ptr <!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc12)
    %1 = cir.get_global @omp_barrier_1 : cir.ptr <!cir.func<!s32i ()>> loc(#loc22)
    %2 = cir.call @omp_barrier_1() : () -> !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, cir.ptr <!s32i> loc(#loc23)
    %3 = cir.load %0 : cir.ptr <!s32i>, !s32i loc(#loc23)
    cir.return %3 : !s32i loc(#loc23)
  } loc(#loc21)
} loc(#loc)
#loc = loc("/home/walterjtv/Escritorio/Q8/TFG/tutorial/openmp/5_basic_barrier.c":0:0)
#loc1 = loc("5_basic_barrier.c":1:1)
#loc2 = loc("5_basic_barrier.c":4:1)
#loc3 = loc("5_basic_barrier.c":2:2)
#loc4 = loc("5_basic_barrier.c":2:21)
#loc5 = loc("5_basic_barrier.c":3:9)
#loc6 = loc("5_basic_barrier.c":3:2)
#loc7 = loc("5_basic_barrier.c":6:1)
#loc8 = loc("5_basic_barrier.c":8:1)
#loc9 = loc("5_basic_barrier.c":7:2)
#loc10 = loc("5_basic_barrier.c":7:21)
#loc11 = loc("5_basic_barrier.c":10:1)
#loc12 = loc("5_basic_barrier.c":12:1)
#loc13 = loc("5_basic_barrier.c":11:9)
#loc14 = loc("5_basic_barrier.c":11:23)
#loc15 = loc("5_basic_barrier.c":11:2)
#loc16 = loc(fused[#loc1, #loc2])
#loc17 = loc(fused[#loc3, #loc4])
#loc18 = loc(fused[#loc6, #loc5])
#loc19 = loc(fused[#loc7, #loc8])
#loc20 = loc(fused[#loc9, #loc10])
#loc21 = loc(fused[#loc11, #loc12])
#loc22 = loc(fused[#loc13, #loc14])
#loc23 = loc(fused[#loc15, #loc14])
